<#
 generateData.ps1
 Sinh lại file assets/js/data.js từ toàn bộ ảnh trong assets/images.

 Chạy:
   powershell -ExecutionPolicy Bypass -File scripts/generateData.ps1

 Tùy chọn:
   -Descending   : Sắp xếp mới nhất trước (mặc định: cũ -> mới)
   -KeepOldIds   : Giữ nguyên id cũ nếu tìm thấy cùng đường dẫn (dựa trên bản data.js hiện tại)
   -TitleFromDir : Thêm tiền tố thư mục vào title

 Có thể tạo file tùy biến tiêu đề/tags: assets/js/overrides.json dạng:
 {
   "assets/images/4/Character/chinhdien-color.png": {"title": "Chính diện màu", "desc": "Nhân vật", "tags": ["character","color"]}
 }
#>
param(
  [switch]$Descending,
  [switch]$KeepOldIds,
  [switch]$TitleFromDir
)

$ErrorActionPreference = 'Stop'
$root = (Get-Location).Path
$imagesDir = Join-Path $root 'assets/images'
$dataFile = Join-Path $root 'assets/js/data.js'
$overrideFile = Join-Path $root 'assets/js/overrides.json'
$backupDir = Join-Path $root 'scripts/backups'
$folderDescFile = Join-Path $root 'Data2.txt'

if(!(Test-Path $imagesDir)){ throw "Không tìm thấy thư mục ảnh: $imagesDir" }
if(!(Test-Path (Split-Path $dataFile -Parent))){ throw "Thiếu thư mục assets/js" }
if(!(Test-Path $backupDir)){ New-Item -ItemType Directory -Path $backupDir | Out-Null }

Write-Host "Đang quét ảnh..." -ForegroundColor Cyan
$patterns = '*.png','*.jpg','*.jpeg','*.webp','*.gif'
$files = Get-ChildItem $imagesDir -Recurse -File -Include $patterns
if(-not $files){ Write-Warning 'Không có ảnh nào.'; exit 0 }

# Nạp overrides nếu có
$overrides = @{}
if(Test-Path $overrideFile){
  try { $overrides = Get-Content $overrideFile -Raw | ConvertFrom-Json } catch { Write-Warning "Không đọc được overrides.json: $_" }
}

# Nạp mô tả thư mục (Data2.txt) dạng:
# Ky5=Mô tả kỳ 5
# Ky5/ANS301=Mô tả môn ANS301 trong kỳ 5
$folderDescMap = @{}
if(Test-Path $folderDescFile){
  Get-Content $folderDescFile | ForEach-Object {
    $line = $_.Trim()
    if(-not $line -or $line.StartsWith('#')){ return }
    $sepIndex = $line.IndexOf('=')
    if($sepIndex -lt 1){ return }
    $key = $line.Substring(0,$sepIndex).Trim().Trim('/')
    $val = $line.Substring($sepIndex+1).Trim()
    if($key){ $folderDescMap[$key.ToLower()] = $val }
  }
}

# Đọc data.js hiện tại để giữ id nếu cần
$oldMap = @{}
if($KeepOldIds -and (Test-Path $dataFile)){
  $raw = Get-Content $dataFile -Raw
  $regex = [regex]"\{[^{}]*?id:\s*(\d+)[^{}]*?img:\s*'(assets\/images\/[^']+)'[^{}]*?\}"
  foreach($m in $regex.Matches($raw)){
    $id = [int]$m.Groups[1].Value
    $imgPath = $m.Groups[2].Value
    if(-not $oldMap.ContainsKey($imgPath)){ $oldMap[$imgPath] = $id }
  }
}

$files = if($Descending){ $files | Sort-Object LastWriteTime -Descending } else { $files | Sort-Object LastWriteTime }

$nextId = 1
if($KeepOldIds -and $oldMap.Count){ $nextId = ([int]($oldMap.Values | Measure-Object -Maximum).Maximum) + 1 }

$artworks = @()
foreach($f in $files){
  # Lấy phần đường dẫn bên trong thư mục images
  $inner = $f.FullName.Substring($imagesDir.Length + 1)
  $inner = $inner.Replace('\\','/')
  $rel = "assets/images/$inner"
  $date = $f.LastWriteTime.ToString('yyyy-MM-dd')
  $base = [System.IO.Path]::GetFileNameWithoutExtension($f.Name)
  if($TitleFromDir){
    $parent = Split-Path $f.FullName -Parent | Split-Path -Leaf
    if($parent -and $parent -ne 'images'){ $base = "$parent - $base" }
  }
  $title = $base
  $desc = ''
  $tags = @()
  if($overrides.ContainsKey($rel)){
    $ov = $overrides[$rel]
    if($ov.title){ $title = $ov.title }
    if($ov.desc){ $desc = $ov.desc }
    if($ov.tags){ $tags = $ov.tags }
  }
  # Áp mô tả từ Data2 nếu chưa có
  if(-not $desc){
    $partsRel = $inner.Split('/')
    $top = if($partsRel.Length -ge 1){ $partsRel[0] } else { $null }
    $sub = if($partsRel.Length -ge 2){ $partsRel[1] } else { $null }
    $keySpecific = if($top -and $sub){ ($top + '/' + $sub).ToLower() } else { $null }
    $keyTop = if($top){ $top.ToLower() } else { $null }
    if($keySpecific -and $folderDescMap.ContainsKey($keySpecific)){ $desc = $folderDescMap[$keySpecific] }
    elseif($keyTop -and $folderDescMap.ContainsKey($keyTop)){ $desc = $folderDescMap[$keyTop] }
  }
  $id = if($KeepOldIds -and $oldMap.ContainsKey($rel)) { $oldMap[$rel] } else { $nextId; $nextId++ }
  $artworks += [pscustomobject]@{ id=$id; date=$date; img=$rel; title=$title; desc=$desc; tags=$tags }
}

# Resolve duplicate IDs if any
$seen = @{}
foreach($a in $artworks){
  if($seen.ContainsKey($a.id)){
    $a.id = $nextId; $nextId++
  }
  $seen[$a.id] = $true
}

# Chuẩn hóa lại dấu gạch chéo (an toàn nếu còn sót)
foreach($a in $artworks){
  if($a.img -like '*\\*') { $a.img = $a.img -replace '\\','/' }
}

function EscapeJs($s){
  if($null -eq $s){ return '' }
  return ($s -replace "'", "\\'")
}

$lines = @()
$genTime = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
$lines += "// AUTO-GENERATED by scripts/generateData.ps1 on $genTime"
$lines += "const artworks = ["
foreach($a in $artworks){
  $tagsArr = if($a.tags.Count){ ($a.tags | ForEach-Object { "'$(EscapeJs $_)'" }) -join ', ' } else { '' }
  $tagsCode = "[${tagsArr}]"
  $imgOut = $a.img -replace '\\','/'
  $lines += "  { id: $($a.id), date: '$($a.date)', img: '$imgOut', title: '$(EscapeJs $a.title)', desc: '$(EscapeJs $a.desc)', tags: $tagsCode },"
}
$lines += "];"
$lines += "window.artworks = artworks;"

if(Test-Path $dataFile){
  $stamp = Get-Date -Format 'yyyyMMdd-HHmmss'
  $backup = Join-Path $backupDir "data.js.$stamp.bak"
  Copy-Item $dataFile $backup
  Write-Host "Đã backup data.js -> $backup" -ForegroundColor Yellow
}

Set-Content -Path $dataFile -Value ($lines -join [Environment]::NewLine) -Encoding UTF8
Write-Host "Đã sinh data.js với $($artworks.Count) artworks." -ForegroundColor Green
